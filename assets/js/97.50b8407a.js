(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{515:function(t,s,a){"use strict";a.r(s);var e=a(18),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"面试问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试问题"}},[t._v("#")]),t._v(" 面试问题")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#js-为什么是单线程的"}},[t._v("JS 为什么是单线程的？")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"js-为什么是单线程的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-为什么是单线程的"}},[t._v("#")]),t._v(" JS 为什么是单线程的？")]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("DETAILS")]),t._v(" "),a("p",[t._v("这主要与 JavaScript 的用途有关，JavaScript 作为浏览器的脚本语言，主要是实现用户与浏览器的交互以及操作 DOM；这就决定了它只能是单线程，否则会带来很复杂的同步问题。例如：JS 被设计为多线程，一个线程要修改 DOM 原始，另一个线程要删除这个 DOM 元素，此时浏览器无法确定以那个为准。对于响应事件的异步处理，会加入到事件队列中，事件循环也是在单线程中进行的。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);