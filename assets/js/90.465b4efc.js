(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{507:function(t,a,e){"use strict";e.r(a);var o=e(18),s=Object(o.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"commonjs-与-es6-module-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-与-es6-module-的区别"}},[t._v("#")]),t._v(" CommonJS 与 ES6 Module 的区别")]),t._v(" "),e("h2",{attrs:{id:"动态与静态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动态与静态"}},[t._v("#")]),t._v(" 动态与静态")]),t._v(" "),e("p",[t._v("CommonJS 与 ES6 Module 最本质的区别在于前者对模块依赖的解决是 “动态的”，而后者是 “静态的”。其中 “动态” 指的是模块的依赖关系的建立发生在代码运行阶段；而 “静态” 则是模块依赖关系的建立发生在代码的编译阶段")]),t._v(" "),e("p",[t._v("ES6 Module 相比于 CommonJS 来说具备一下几点优势：")]),t._v(" "),e("ul",[e("li",[t._v("死代码检测与排除")]),t._v(" "),e("li",[t._v("模块变量类型检查")]),t._v(" "),e("li",[t._v("编译器优化")])]),t._v(" "),e("h2",{attrs:{id:"值拷贝与动态映射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#值拷贝与动态映射"}},[t._v("#")]),t._v(" 值拷贝与动态映射")]),t._v(" "),e("p",[t._v("导入模块对于 CommonJS 来说获取的是一份导出值的拷贝；而在 ES6 Module 中则是值的动态映射，并且这个映射是只读的。")]),t._v(" "),e("h2",{attrs:{id:"循环依赖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环依赖"}},[t._v("#")]),t._v(" 循环依赖")]),t._v(" "),e("p",[t._v("CommonJS 不支持循环依赖问题，ES6 Module 的特性使其可以更好地支持循环依赖，只是需要由开发者来保证当导入的值被使用是已经设置好正确的导出值")])])}),[],!1,null,null,null);a.default=s.exports}}]);