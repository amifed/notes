(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{514:function(t,s,a){"use strict";a.r(s);var e=a(18),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),a("h4",{attrs:{id:"js-的基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-的基本数据类型"}},[t._v("#")]),t._v(" js 的基本数据类型")]),t._v(" "),a("p",[t._v("JavaScript 中有八种数据类型（前七种为基本数据类型，也称为原始数据类型，而 "),a("code",[t._v("object")]),t._v(" 为复杂数据类型，也称引用数据类型）。")]),t._v(" "),a("p",[a("code",[t._v("number")]),t._v(" 、"),a("code",[t._v("bigint")]),t._v("、"),a("code",[t._v("string")]),t._v(" 、"),a("code",[t._v("boolean")]),t._v("、"),a("code",[t._v("null")]),t._v(" 、"),a("code",[t._v("undefined")]),t._v(" 、"),a("code",[t._v("symbol")]),t._v(" 、"),a("code",[t._v("object")]),t._v(" 。")]),t._v(" "),a("p",[t._v("ES6 中新增 "),a("code",[t._v("Symbol")]),t._v("，用于唯一的标识符，创建后独一无二且不可变，可以解决可能出现的全局变量冲突问题。")]),t._v(" "),a("p",[t._v("ES10 中新增 "),a("code",[t._v("BigInt")]),t._v("，可以表示任意长度的整数，可以安全的存储和运算大整数 ÷")]),t._v(" "),a("h4",{attrs:{id:"数据类型及存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型及存储"}},[t._v("#")]),t._v(" 数据类型及存储")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("栈：原始数据类型（"),a("code",[t._v("number")]),t._v(" 、"),a("code",[t._v("bigint")]),t._v("、"),a("code",[t._v("string")]),t._v(" 、"),a("code",[t._v("boolean")]),t._v("、"),a("code",[t._v("null")]),t._v(" 、"),a("code",[t._v("undefined")]),t._v(" 、"),a("code",[t._v("symbol")]),t._v("）")])]),t._v(" "),a("li",[a("p",[t._v("堆：引用数据类型（"),a("code",[t._v("object")]),t._v("）")])])]),t._v(" "),a("p",[t._v("原始数据类型是存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用的数据，所以放在栈中存储。")]),t._v(" "),a("p",[t._v("引用数据类型是存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获取实体。")]),t._v(" "),a("blockquote",[a("p",[t._v("栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。操作方式类似于数据结构中的栈。")]),t._v(" "),a("p",[t._v("堆区内存一般由程序员分配释放，若程序员不释放，程序结束时可能由垃圾回收机制回收。")])]),t._v(" "),a("h4",{attrs:{id:"内部属性-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部属性-class"}},[t._v("#")]),t._v(" 内部属性 [[Class]]")]),t._v(" "),a("p",[t._v("所有 "),a("code",[t._v("typeof")]),t._v(" 返回值为 "),a("code",[t._v("object")]),t._v(" 的对象都包含一个内部属性 [[Class]]（可以将它看作一个内部分类，而非传统面向对象意义上的类）。这个属相无法直接访问，一般通过 "),a("code",[t._v("Object.prototype.toString()")]),t._v(" 来查看。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Array]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Null]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("可以使用特殊的对象属性 "),a("code",[t._v("Symbol.toStringTag")]),t._v(" 自定义对象的 "),a("code",[t._v("toString")]),t._v(" 方法的行为。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toStringTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"User"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object User]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h4",{attrs:{id:"js-三大对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-三大对象"}},[t._v("#")]),t._v(" JS 三大对象")]),t._v(" "),a("p",[t._v("JavaScript 有三大对象，分别是 本地对象、内置对象和宿主对象。")]),t._v(" "),a("p",[t._v("在此引用 ECMA-262（ECMAScript 的制定标准）对于他们的定义：")]),t._v(" "),a("ul",[a("li",[t._v("本地对象\n"),a("ul",[a("li",[t._v("与宿主无关，独立于宿主环境的 ECMAScript 实现提供的对象。")]),t._v(" "),a("li",[t._v("简单来说，本地对象就是 ECMA-262 定义的类（引用类型）。")]),t._v(" "),a("li",[t._v("这些引用类型在运行过程中需要通过 new 来创建所需的实例对象。")]),t._v(" "),a("li",[t._v("包含："),a("code",[t._v("Object")]),t._v("、"),a("code",[t._v("Array")]),t._v("、"),a("code",[t._v("Date")]),t._v("、"),a("code",[t._v("RegExp")]),t._v("、"),a("code",[t._v("Function")]),t._v("、"),a("code",[t._v("Boolean")]),t._v("、"),a("code",[t._v("Number")]),t._v("、"),a("code",[t._v("String")]),t._v("等。")])])]),t._v(" "),a("li",[t._v("内置对象\n"),a("ul",[a("li",[t._v("与宿主无关，独立于宿主环境的 ECMAScript 实现提供的对象。")]),t._v(" "),a("li",[t._v("在 ECMAScript 程序开始执行前就存在，本身就是实例化内置对象，开发者无需再去实例化。")]),t._v(" "),a("li",[t._v("内置对象是本地对象的子集。")]),t._v(" "),a("li",[t._v("包含："),a("code",[t._v("Global")]),t._v("和"),a("code",[t._v("Math")]),t._v("。")]),t._v(" "),a("li",[t._v("ECMAScript5 中增添了"),a("code",[t._v("JSON")]),t._v("这个存在于全局的内置对象。")])])]),t._v(" "),a("li",[t._v("宿主对象\n"),a("ul",[a("li",[t._v("由 ECMAScript 实现的宿主环境提供的对象，包含两大类，一个是宿主提供，一个是自定义类对象。")]),t._v(" "),a("li",[t._v("所有非本地对象都属于宿主对象。")]),t._v(" "),a("li",[t._v("对于嵌入到网页中的 JS 来说，其宿主对象就是浏览器提供的对象，浏览器对象有很多，如"),a("code",[t._v("Window")]),t._v("和"),a("code",[t._v("Document")]),t._v("等。")]),t._v(" "),a("li",[t._v("所有的"),a("code",[t._v("DOM")]),t._v("和"),a("code",[t._v("BOM")]),t._v("对象都属于宿主对象。")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("关于专业名词：本地对象也经常被叫做原生对象或内部对象，包含 Global 和 Math 在内的内置对象在《JavaScript 高级程序设计》里也被叫做单体内置对象，很多时候，干脆也会直接把本地对象和内置对象统称为“内置对象”，也就是说除了宿主对象，剩下的都是 ECMAScript 的内部的“内置”对象。")]),t._v(" "),a("p",[t._v("声明：本文也将采取这种统称为“内置对象”的方式，比如文章标题。")])]),t._v(" "),a("p",[t._v("参考链接："),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 标准内置对象"),a("OutboundLink")],1),t._v("，"),a("a",{attrs:{href:"https://segmentfault.com/a/1190000011467723",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS 所有内置对象属性和方法汇总"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"undefined-与-undeclared-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undefined-与-undeclared-的区别"}},[t._v("#")]),t._v(" undefined 与 undeclared 的区别？")]),t._v(" "),a("p",[t._v("已在作用域中声明但还没有赋值的变量，是 "),a("code",[t._v("undefined")]),t._v(" 的。相反，还没有在作用域中声明过的变量，是 undeclared 的。")]),t._v(" "),a("p",[t._v("对于 undeclared 变量的引用，浏览器会报引用错误，如 "),a("code",[t._v("ReferenceError: XX is not defined")]),t._v(" 。但是我们可以使用 "),a("code",[t._v("typeof")]),t._v(" 的安全防范机制来避免报错，因为对于 undeclared（或者 not defined ）变量，"),a("code",[t._v("typeof")]),t._v(" 会返回 "),a("code",[t._v("undefined")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"null-和-undefined-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined-的区别"}},[t._v("#")]),t._v(" null 和 undefined 的区别？")]),t._v(" "),a("p",[t._v("首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 "),a("code",[t._v("undefined")]),t._v(" 和 "),a("code",[t._v("null")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("undefined")]),t._v(" 代表的含义是未定义，"),a("code",[t._v("null")]),t._v(" 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 "),a("code",[t._v("undefined")]),t._v("，"),a("code",[t._v("null")]),t._v("主要用于赋值给一些可能会返回对象的变量，作为初始化。")]),t._v(" "),a("p",[a("code",[t._v("undefined")]),t._v(" 在 js 中不是一个保留字，这意味着我们可以使用 undefined 来作为一个变量名，这样的做法是非常危险的，它会影响我们对 undefined 值的判断。但是我们可以通过一些方法获得"),a("strong",[t._v("安全的 undefined 值")]),t._v("，比如说 void 0。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("当我们对两种类型使用 "),a("code",[t._v("typeof")]),t._v(" 进行判断的时候，Null 类型化会返回 “object”，这是一个历史遗留的问题。当我们使用标准相等符"),a("code",[t._v("==")]),t._v("对两种类型的值进行比较时会返回 true，使用严格相等符"),a("code",[t._v("===")]),t._v("时会返回 false。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("参考文章："),a("a",{attrs:{href:"http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8Bundefined%E4%B8%8Enull.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 深入理解之 undefined 与 null"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"javascript-基本规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-基本规范"}},[t._v("#")]),t._v(" JavaScript 基本规范")]),t._v(" "),a("p",[t._v("尽量使用严格相等符"),a("code",[t._v("===")]),t._v("或"),a("code",[t._v("!==")])]),t._v(" "),a("p",[t._v("不要再内置对象的原型上添加方法")]),t._v(" "),a("p",[a("code",[t._v("for")]),t._v("、"),a("code",[t._v("if")]),t._v(" 等代码块必须用大括号")]),t._v(" "),a("h4",{attrs:{id:"javascript-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-对象"}},[t._v("#")]),t._v(" JavaScript 对象")]),t._v(" "),a("h5",{attrs:{id:"属性存在性测试-in-操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性存在性测试-in-操作符"}},[t._v("#")]),t._v(" 属性存在性测试，“in” 操作符")]),t._v(" "),a("p",[a("strong",[t._v("能够被访问任何属性。即使属性不存在也不会报错！")])]),t._v(" "),a("p",[t._v("读取不存在的属性只会得到 "),a("code",[t._v("undefined")]),t._v("。所以我们可以很容易地判断一个属性是否存在：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("noProperty "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("操作符 "),a("code",[t._v('"in"')]),t._v(" 也可检查属性是否存在，语法是：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'key'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" object "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// key 为属性名")]),t._v("\nkey "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" object "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// key 为变量")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("大部分情况下与 "),a("code",[t._v("undefined")]),t._v(" 进行比较就可判断属性是否存在，但当属性值为 "),a("code",[t._v("undefined")]),t._v(" 时，"),a("code",[t._v("in")]),t._v("运算符的判断仍是对的。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined, 但属性存在")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'key'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("可使用循环："),a("code",[t._v("for ..in")]),t._v(" 遍历所有可枚举键，会遍历自己的以及继承的键")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("blockquote",[a("p",[t._v("如果只想得到本身（非继承）的属性，可使用 "),a("code",[t._v("obj.hasOwnProperty(key)")]),t._v(" 来判断，也可通过 "),a("code",[t._v("Objcet.keys()")]),t._v(" 方法获取对象自身的属性。")])]),t._v(" "),a("h5",{attrs:{id:"对象比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象比较"}},[t._v("#")]),t._v(" 对象比较")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 复制引用")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("h5",{attrs:{id:"对象-原始值转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象-原始值转换"}},[t._v("#")]),t._v(" 对象 — 原始值转换")]),t._v(" "),a("p",[t._v("对象到原始值的转换，是由许多期望以原始值作为值的内建函数和运算符自动调用的。")]),t._v(" "),a("p",[t._v("这里有三种类型（hint）：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v('"string"')]),t._v("（对于 "),a("code",[t._v("alert")]),t._v(" 和其他需要字符串的操作）")]),t._v(" "),a("li",[a("code",[t._v('"number"')]),t._v("（对于数学运算）")]),t._v(" "),a("li",[a("code",[t._v('"default"')]),t._v("（少数运算符）")])]),t._v(" "),a("p",[t._v("规范明确描述了哪个运算符使用哪个 hint。很少有运算符“不知道期望什么”并使用 "),a("code",[t._v('"default"')]),t._v(" hint。通常对于内建对象，"),a("code",[t._v('"default"')]),t._v(" hint 的处理方式与 "),a("code",[t._v('"number"')]),t._v(" 相同，因此在实践中，最后两个 hint 常常合并在一起。")]),t._v(" "),a("p",[t._v("转换算法是：")]),t._v(" "),a("ol",[a("li",[t._v("调用 "),a("code",[t._v("obj[Symbol.toPrimitive](hint)")]),t._v(" 如果这个方法存在，")]),t._v(" "),a("li",[t._v("否则，如果 hint 是 "),a("code",[t._v('"string"')]),t._v(" "),a("ul",[a("li",[t._v("尝试 "),a("code",[t._v("obj.toString()")]),t._v(" 和 "),a("code",[t._v("obj.valueOf()")]),t._v("，无论哪个存在。")])])]),t._v(" "),a("li",[t._v('否则，如果 hint 是 "number" 或者 '),a("code",[t._v('"default"')]),t._v(" "),a("ul",[a("li",[t._v("尝试 "),a("code",[t._v("obj.valueOf()")]),t._v(" 和 "),a("code",[t._v("obj.toString()")]),t._v("，无论哪个存在。")])])])]),t._v(" "),a("p",[t._v("在实践中，为了便于进行日志记录或调试，对于所有能够返回一种“可读性好”的对象的表达形式的转换，只实现以 "),a("code",[t._v("obj.toString()")]),t._v(" 作为全能转换的方法就够了。")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://zh.javascript.info/object-toprimitive",target:"_blank",rel:"noopener noreferrer"}},[t._v("现代 JavaScript 教程 - 对象 — 原始值转换"),a("OutboundLink")],1)])]),t._v(" "),a("h4",{attrs:{id:"原型、原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型、原型链"}},[t._v("#")]),t._v(" 原型、原型链")]),t._v(" "),a("h5",{attrs:{id:"prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[t._v("#")]),t._v(" [[Prototype]]")]),t._v(" "),a("p",[t._v("在 JavaScript 中，对象有一个特殊的隐藏属性 "),a("code",[t._v("[[Prototype]]")]),t._v("（如规范中所命名的），它要么为 "),a("code",[t._v("null")]),t._v("，要么就是对另一个对象的引用。该对象被称为“原型”。")]),t._v(" "),a("p",[t._v("当我们从 "),a("code",[t._v("object")]),t._v(" 中读取一个缺失的属性或方法时，JavaScript 会自动从原型中获取。")]),t._v(" "),a("p",[t._v("属性 "),a("code",[t._v("[[Prototype]]")]),t._v(" 是内部的而且是隐藏的，有很多方式访问并设置它。")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("__proto__")]),t._v("，指向 "),a("code",[t._v("[[Prototype]]")])])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("Object.getPrototypeOf(o)")]),a("OutboundLink")],1),t._v("，返回对象 "),a("code",[t._v("obj")]),t._v(" 的 "),a("code",[t._v("[[Prototype]]")]),t._v("（与 "),a("code",[t._v("__proto__")]),t._v(" 的 getter 相同）")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/create",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("Object.create(proto,[descriptors])")]),a("OutboundLink")],1),t._v("，利用给定的 "),a("code",[t._v("proto")]),t._v(" 作为 "),a("code",[t._v("[[Prototype]]")]),t._v("（可以是 "),a("code",[t._v("null")]),t._v("）和可选的属性描述来创建一个空对象。")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("Object.setPrototypeOf(o, proto)")]),a("OutboundLink")],1),t._v("，将对象 "),a("code",[t._v("obj")]),t._v(" 的 "),a("code",[t._v("[[Prototype]]")]),t._v(" 设置为 "),a("code",[t._v("proto")]),t._v("（与 "),a("code",[t._v("__proto__")]),t._v(" 的 setter 相同）。")])])]),t._v(" "),a("h5",{attrs:{id:"f-prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#f-prototype"}},[t._v("#")]),t._v(" F.prototype")]),t._v(" "),a("p",[t._v("为通过构造函数创建的对象设置 "),a("code",[t._v("[[Prototype]]")]),t._v(" ，可使用 "),a("code",[t._v("F.prototype")]),t._v("，它是只有函数才有的属性。")]),t._v(" "),a("p",[t._v("默认情况下，所有函数都有 "),a("code",[t._v("F.prototype = {constructor：F}")]),t._v("；")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("F.prototype")]),t._v(" 的值要么是一个对象，要么就是 "),a("code",[t._v("null")]),t._v("：其他值都不起作用。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("F.prototype")]),t._v(" 属性（不要把它与 "),a("code",[t._v("[[Prototype]]")]),t._v(" 弄混了）在 "),a("code",[t._v("new F")]),t._v(" 被调用时为新对象的 "),a("code",[t._v("[[Prototype]]")]),t._v(" 赋值。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v('"prototype"')]),t._v(" 属性仅在设置了一个构造函数（constructor function），并通过 "),a("code",[t._v("new")]),t._v(" 调用时，才有作用")])])]),t._v(" "),a("h6",{attrs:{id:"原生的原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原生的原型"}},[t._v("#")]),t._v(" 原生的原型")]),t._v(" "),a("p",[a("code",[t._v("Object")]),t._v(" 就是一个内建的对象构造函数，其自身的 "),a("code",[t._v("prototype")]),t._v(" 指向一个的是 "),a("code",[t._v("Object.prototype")]),t._v(" （一个带有 "),a("code",[t._v("toString()")]),t._v(" 等对象方法的巨大对象）")]),t._v(" "),a("p",[t._v("其他内建对象，如 "),a("code",[t._v("Array")]),t._v("、"),a("code",[t._v("Data")]),t._v("、"),a("code",[t._v("Function")]),t._v(" 等都在 prototype 上挂载了方法。")]),t._v(" "),a("p",[t._v("按照规范，所有的内建原型顶端都是 "),a("code",[t._v("Object.prototype")]),t._v("。这就是为什么有人说“一切都从对象继承而来”。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/javascript-tutorial/zh.javascript.info/000e1fd0f5bce342284c128487af79fb21950f79/1-js/08-prototypes/03-native-prototypes/native-prototypes-classes.svg",alt:"native-prototypes-classes"}})]),t._v(" "),a("blockquote",[a("p",[t._v("图片来源："),a("a",{attrs:{href:"https://zh.javascript.info/native-prototypes",target:"_blank",rel:"noopener noreferrer"}},[t._v("现代 JavaScript 教程 - 原生的原型"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("相关文章："),a("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/2",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 深入之从原型到原型链"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://github.com/KieSun/Dream/issues/2",target:"_blank",rel:"noopener noreferrer"}},[t._v("深度解析原型中的各个难点"),a("OutboundLink")],1)])]),t._v(" "),a("h4",{attrs:{id:"在-js-中不同进制数字的表示方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-js-中不同进制数字的表示方式"}},[t._v("#")]),t._v(" 在 js 中不同进制数字的表示方式")]),t._v(" "),a("ul",[a("li",[t._v("以 0X、0x 开头的表示为十六进制。")]),t._v(" "),a("li",[t._v("以 0、0O、0o 开头的表示为八进制。")]),t._v(" "),a("li",[t._v("以 0B、0b 开头的表示为二进制格式。")])]),t._v(" "),a("h4",{attrs:{id:"js-中整数的安全范围是多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-中整数的安全范围是多少"}},[t._v("#")]),t._v(" js 中整数的安全范围是多少？")]),t._v(" "),a("p",[t._v("安全整数指的是，在这个范围内的整数转化为二进制存储的时候不会出现精度丢失，能够被“安全”呈现的整数是 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mo",[t._v("±")]),a("msup",[a("mn",[t._v("2")]),a("mn",[t._v("53")])],1),a("mo",[t._v("−")]),a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\pm 2^{53} - 1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),a("span",{staticClass:"mord"},[t._v("±")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord"},[t._v("2")]),a("span",{staticClass:"msupsub"},[a("span",{staticClass:"vlist-t"},[a("span",{staticClass:"vlist-r"},[a("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[a("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),a("span",{staticClass:"sizing reset-size6 size3 mtight"},[a("span",{staticClass:"mord mtight"},[a("span",{staticClass:"mord mtight"},[t._v("5")]),a("span",{staticClass:"mord mtight"},[t._v("3")])])])])])])])])]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),a("span",{staticClass:"mbin"},[t._v("−")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"mord"},[t._v("1")])])])]),t._v("。在 ES6 中被定义为 "),a("code",[t._v("Number.MAX_SAFE_INTEGER")]),t._v("，最小整数被定义为"),a("code",[t._v("Number.MIN_SAFE_INTEGER")]),t._v("。")]),t._v(" "),a("p",[t._v("如果某次计算的结果得到一个超过数值范围的值，那么这个值会被自动转换为特殊的 "),a("code",[t._v("Infinity")]),t._v(" 值，正负 "),a("code",[t._v("Infinity")]),t._v("无法参与运算。一个数是否有穷可使用函数 "),a("code",[t._v("isFinite()")]),t._v(" 来判断。")]),t._v(" "),a("h4",{attrs:{id:"typeof-nan-的结果是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof-nan-的结果是什么"}},[t._v("#")]),t._v(" typeof NaN 的结果是什么？")]),t._v(" "),a("p",[a("code",[t._v("NaN")]),t._v("，意指 Not a Number。"),a("code",[t._v("NaN")]),t._v(" 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况。"),a("code",[t._v("NaN")]),t._v(" 是个特殊值，和自身不相等。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "number"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h4",{attrs:{id:"判断数组的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断数组的方法"}},[t._v("#")]),t._v(" 判断数组的方法？")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Array\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[object Array]'")]),t._v("\nArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h4",{attrs:{id:"什么是假值对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是假值对象"}},[t._v("#")]),t._v(" 什么是假值对象？")]),t._v(" "),a("p",[t._v("浏览器在某些特定情况下，在常规 JavaScript 语法基础上自己创建了一些外来值，这些就是“假值对象”。假值对象看起来和普通对象并无二致（都有属性，等等），但将它们强制类型转换为布尔值时结果为 false 最常见的例子是 "),a("code",[t._v("document.all")]),t._v("，它是一个类数组对象，包含了页面上的所有元素，由 DOM（而不是 JavaScript 引擎）提供给 JavaScript 程序使用。")]),t._v(" "),a("h4",{attrs:{id:"this-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-对象"}},[t._v("#")]),t._v(" This 对象")]),t._v(" "),a("p",[a("code",[t._v("this")]),t._v(" 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，"),a("code",[t._v("this")]),t._v(" 的指向可以通过四种调用模式来判断（按优先级排列）。")]),t._v(" "),a("ul",[a("li",[t._v("构造器调用模式，一个函数使用 "),a("code",[t._v("new")]),t._v(" 调用时，函数执行前会创建一个对象，"),a("code",[t._v("this")]),t._v(" 指向这个新创建的对象；")]),t._v(" "),a("li",[a("code",[t._v("apply")]),t._v("、"),a("code",[t._v("call")]),t._v("、"),a("code",[t._v("bind")]),t._v("调用模式，显示制定调用函数的 "),a("code",[t._v("this")]),t._v(" 指向；")]),t._v(" "),a("li",[t._v("方法调用模式，一个函数作为对象的方法调用时，"),a("code",[t._v("this")]),t._v(" 指向该对象；")]),t._v(" "),a("li",[t._v("函数调用模式，函数直接调用时，"),a("code",[t._v("this")]),t._v(" 指向全局对象")])]),t._v(" "),a("blockquote",[a("p",[t._v("箭头函数没有 this，它 his 只取决于它外面的第一个不是箭头函数的函数的 this，直到全局对象")])]),t._v(" "),a("h4",{attrs:{id:"dom-bom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom-bom"}},[t._v("#")]),t._v(" DOM，BOM")]),t._v(" "),a("p",[t._v("DOM，文档对象模型，是 HTML 和 XML 文档的编程接口。即将文档当作一个对象来对待，该对象提供了处理网页内容的方法和接口。")]),t._v(" "),a("p",[t._v("BOM，浏览器对象墨模型，提供了与网页无关的浏览器功能对象。即将浏览器当作一个对象来对待，该对象提供了与浏览器交互的方法和接口。BOM 的核心是 window 对象，表示浏览器的实例。window 对象在浏览器中有两重身份，一个是 ECMAScript 中的 Global 对象，另一个就是浏览器窗口的 JavaScript 接口。这意味着网页中定义的所有对象、变量和函数都以 window 作为其 Global 对象，都可以访问其上定义的 "),a("code",[t._v("parseInt()")]),t._v(" 等全局方法。")]),t._v(" "),a("h4",{attrs:{id:"事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),a("p",[t._v("JavaScript 与 HTML 的交互是通过事件实现的，事件代表文档或浏览器窗口中某个有意义的时刻。常见事件比如用户鼠标事件 click\\move、用户键盘事件 keydown\\keyup、文档加载 load、网页滚动 scroll、浏览器窗口调整 resize 等。")]),t._v(" "),a("h5",{attrs:{id:"三种事件模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三种事件模型"}},[t._v("#")]),t._v(" 三种事件模型")]),t._v(" "),a("p",[t._v("现代浏览器共有三种事件模型：")]),t._v(" "),a("ol",[a("li",[t._v("DOM0 级事件模型，事件不会传播，没有事件流的概念，但是现在有的浏览器支持以冒泡的方式实\n现，它可以在网页中直接定义监听函数，也可以通过 js 属性来指定监听函数。这种方式是所有浏览器都兼容的。")]),t._v(" "),a("li",[t._v("IE 事件模型，共有事件处理阶段和事件冒泡阶段两个过程。")]),t._v(" "),a("li",[t._v("DOM2 级事件模型，共有事件捕获阶段、事件处理阶段和事件冒泡阶段三个过程。")])]),t._v(" "),a("h5",{attrs:{id:"事件委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件委托"}},[t._v("#")]),t._v(" 事件委托")]),t._v(" "),a("p",[t._v("事件委托本质上是利用了浏览器事件捕获和冒泡的机制。因为事件在冒泡过程中会上传到父节点，并且父节点可以通过事件对象获取到目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。")]),t._v(" "),a("h4",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Closure_(computer_programming)",target:"_blank",rel:"noopener noreferrer"}},[t._v("闭包"),a("OutboundLink")],1),t._v(" 是指内部函数总是可以访问其所在的外部函数中声明的变量和参数，即使在其外部函数被返回（寿命终结）了之后。在某些编程语言中，这是不可能的，或者应该以特殊的方式编写函数来实现。在 JavaScript 中，所有函数都是天生闭包的（只有一个例外， "),a("a",{attrs:{href:"https://zh.javascript.info/new-function",target:"_blank",rel:"noopener noreferrer"}},[t._v('"new Function" 语法'),a("OutboundLink")],1),t._v(" ）。")]),t._v(" "),a("p",[t._v("也就是说：JavaScript 中的函数会自动通过隐藏的 "),a("code",[t._v("[[Environment]]")]),t._v(" 属性记住创建它们的位置，所以它们都可以访问外部变量。")]),t._v(" "),a("p",[a("strong",[t._v("常见用途")])]),t._v(" "),a("ul",[a("li",[t._v("创建私有变量，使用闭包在外部调用闭包中的函数能够访问到闭包中的变量；")]),t._v(" "),a("li",[t._v("防止垃圾回收，闭包中函数保留对闭包中变量对象的引用，函数执行上下文的对象继续留在内存中，不会被垃圾回收；")]),t._v(" "),a("li",[t._v("防抖节流")])]),t._v(" "),a("h4",{attrs:{id:"use-strict"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-strict"}},[t._v("#")]),t._v(' "use strict"')]),t._v(" "),a("p",[t._v("ES5 新增的语言特性，用来激活一些特性，使代码在严格模式下运行。")]),t._v(" "),a("p",[t._v("例如禁止 "),a("code",[t._v("this")]),t._v("指向全局对象、禁止 "),a("code",[t._v("with")]),t._v(" 语句等。")]),t._v(" "),a("ul",[a("li",[t._v("消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;")]),t._v(" "),a("li",[t._v("消除代码运行的一些不安全之处，保证代码运行的安全；")]),t._v(" "),a("li",[t._v("提高编译器效率，增加运行速度；")])]),t._v(" "),a("blockquote",[a("p",[t._v("现代 JavaScript 支持 “classes” 和 “modules” ，它们会自动启用 "),a("code",[t._v("use strict")])])]),t._v(" "),a("h4",{attrs:{id:"js-延迟加载的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-延迟加载的方式"}},[t._v("#")]),t._v(" js 延迟加载的方式")]),t._v(" "),a("p",[t._v("Js 的加载、解析和执行会阻塞页面的渲染，js 脚本延迟加载能够提高页面渲染速度。")]),t._v(" "),a("ul",[a("li",[t._v("脚本放在文档底部")]),t._v(" "),a("li",[a("code",[t._v("defer")]),t._v(" 属性，"),a("code",[t._v('<script src="..." defer/>')]),t._v("。脚本不会阻塞页面，DOM 解析完毕，在 "),a("code",[t._v("DOMContentLoaded")]),t._v(" 事件前执行脚本。具有 "),a("code",[t._v("defer")]),t._v(" 属性的脚本保持其相对顺序执行。")]),t._v(" "),a("li",[a("code",[t._v("async")]),t._v(" 属性，"),a("code",[t._v('<script src="..." async/>')]),t._v("。脚本不会阻塞页面，且完全独立于页面及其他脚本，并在加载完成后执行。")]),t._v(" "),a("li",[t._v("动态脚本，动态创建脚本，并附加到文档中，"),a("strong",[t._v("默认情况下，动态脚本的行为是“异步”的。")])])]),t._v(" "),a("h4",{attrs:{id:"同步和异步的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步的区别"}},[t._v("#")]),t._v(" 同步和异步的区别？")]),t._v(" "),a("p",[a("strong",[t._v("同步")]),t._v("，可以理解为在执行完一个函数或方法之后，一直等待系统返回值或消息，这时程序是处于阻塞的，只有接收到返回的值或消息后才往下执行其他的命令。")]),t._v(" "),a("p",[a("strong",[t._v("异步")]),t._v("，执行完函数或方法后，不必阻塞性地等待返回值或消息，只需要向系统委托一个异步过程，那么当系统接收到返回值或消息时，系统会自动触发委托的异步过程，从而完成一个完整的流程。")]),t._v(" "),a("h4",{attrs:{id:"模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[t._v("#")]),t._v(" 模块化")]),t._v(" "),a("h5",{attrs:{id:"几种模块化规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#几种模块化规范"}},[t._v("#")]),t._v(" 几种模块化规范")]),t._v(" "),a("ul",[a("li",[t._v("CommonJS")]),t._v(" "),a("li",[t._v("AMD")]),t._v(" "),a("li",[t._v("CMD")]),t._v(" "),a("li",[t._v("ES6")])]),t._v(" "),a("h4",{attrs:{id:"ecmascript6-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript6-class"}},[t._v("#")]),t._v(" ECMAScript6 Class")]),t._v(" "),a("p",[t._v("简单来讲，Class 是构造函数的语法糖，但在那基础之上也新增一些特性。")]),t._v(" "),a("p",[t._v("在 Class 中添加方法，其实是添加在类的原型上。")]),t._v(" "),a("h4",{attrs:{id:"类数组对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类数组对象"}},[t._v("#")]),t._v(" 类数组对象")]),t._v(" "),a("p",[t._v("拥有 "),a("code",[t._v("length")]),t._v(" 属性和索引属性的对象，常见的类数组对象有 "),a("code",[t._v("argument")]),t._v(" 和 DOM 方法返回的结果，函数有 "),a("code",[t._v("length")]),t._v(" 属性，故也可以被看作类数组对象。")]),t._v(" "),a("p",[a("strong",[t._v("类数组对象转换为数组的方法")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 [].slice.call(obj)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("splice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nArray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h4",{attrs:{id:"哪些操作会造成内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哪些操作会造成内存泄漏"}},[t._v("#")]),t._v(" 哪些操作会造成内存泄漏")]),t._v(" "),a("ul",[a("li",[t._v("意外的全局变量，由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中；")]),t._v(" "),a("li",[t._v("被遗忘的计时器或回调函数，例如设置了 "),a("code",[t._v("setInterval")]),t._v(" 定时器，而忘记取消，如果循环函数有对外部变量的引用，那么变量会被一直留在内存中；")]),t._v(" "),a("li",[t._v("脱离 DOM 的引用，获取一个 DOM 元素的引用，而后面这个元素被删除，但引用一直保留在内存中；")]),t._v(" "),a("li",[t._v("闭包，不合理使用闭包，导致一些变量一直被保留在内存中。")])]),t._v(" "),a("h4",{attrs:{id:"如何判断当前脚本运行在浏览器还是-node-环境中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何判断当前脚本运行在浏览器还是-node-环境中"}},[t._v("#")]),t._v(" 如何判断当前脚本运行在浏览器还是 Node 环境中")]),t._v(" "),a("p",[t._v("浏览器的全局变量为 "),a("code",[t._v("window")]),t._v("，Node 的全局变量为 "),a("code",[t._v("global")]),t._v(";")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('this === window // false/true\ntypeof window // undefined/"object"\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h4",{attrs:{id:"polyfill"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#polyfill"}},[t._v("#")]),t._v(" Polyfill")]),t._v(" "),a("p",[t._v("Polyfill 指的是用于实现浏览器并不支持的原生 API 的代码。")]),t._v(" "),a("h4",{attrs:{id:"event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[t._v("#")]),t._v(" Event Loop")]),t._v(" "),a("p",[t._v("事件循环是 JavaScript 的执行机制。")]),t._v(" "),a("p",[t._v("JS 执行时同步任务依次执行，异步任务添加到任务队列中，任务队列分为宏任务队列和微任务队列。")]),t._v(" "),a("p",[a("strong",[t._v("每个宏任务之后，引擎会立即执行微任务队列中的所有任务，然后再执行其他的宏任务，或渲染，或进行其他任何操作。")])]),t._v(" "),a("p",[t._v("相关文章："),a("a",{attrs:{href:"https://mp.weixin.qq.com/s/pmduRv-1JKU7tq9vkBTMXg",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 事件循环：从起源到浏览器再到 Node.js"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"_0-1-0-2-0-3-如何解决这个问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1-0-2-0-3-如何解决这个问题"}},[t._v("#")]),t._v(" 0.1 + 0.2 != 0.3？如何解决这个问题")]),t._v(" "),a("p",[t._v("计算实际为二进制的计算，而浮点数 0.1 和 0.2 在转换为二进制表示的时候会出现位数无限循环，在计算后超出数字表示范围的数会被截取，导致丢失精度。")]),t._v(" "),a("p",[t._v("可以先将小数转化为整数，计算后再转换为小数。")]),t._v(" "),a("p",[t._v("如果两数之差小于一个极小数，也可以认定两数是相等的。")]),t._v(" "),a("h4",{attrs:{id:"mvc、mvp-和-mvvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvc、mvp-和-mvvm"}},[t._v("#")]),t._v(" MVC、MVP 和 MVVM")]),t._v(" "),a("h4",{attrs:{id:"异步编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步编程"}},[t._v("#")]),t._v(" 异步编程")]),t._v(" "),a("ul",[a("li",[t._v("回调函数")]),t._v(" "),a("li",[t._v("Promise")]),t._v(" "),a("li",[t._v("Generator")]),t._v(" "),a("li",[t._v("Async")])]),t._v(" "),a("h4",{attrs:{id:"一段-js-代码是如何运行的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一段-js-代码是如何运行的"}},[t._v("#")]),t._v(" 一段 JS 代码是如何运行的？")]),t._v(" "),a("p",[t._v("在执行一段代码时，JS 引擎会首先创建一个执行栈")]),t._v(" "),a("p",[t._v("然后 JS 引擎会创建一个全局执行上下文，并 push 到执行栈中, 这个过程 JS 引擎会为这段代码中所有变量分配内存并赋一个初始值（undefined），在创建完成后，JS 引擎会进入执行阶段，这个过程 JS 引擎会逐行的执行代码，即为之前分配好内存的变量逐个赋值(真实值)。")]),t._v(" "),a("p",[t._v("如果这段代码中存在 function 的声明和调用，那么 JS 引擎会创建一个函数执行上下文，并 push 到执行栈中，其创建和执行过程跟全局执行上下文一样。但有特殊情况，即当函数中存在对其它函数的调用时，JS 引擎会在父函数执行的过程中，将子函数的全局执行上下文 push 到执行栈，这也是为什么子函数能够访问到父函数内所声明的变量。")]),t._v(" "),a("p",[t._v("还有一种特殊情况是，在子函数执行的过程中，父函数已经 return 了，这种情况下，JS 引擎会将父函数的上下文从执行栈中移除，与此同时，JS 引擎会为还在执行的子函数上下文创建一个闭包，这个闭包里保存了父函数内声明的变量及其赋值，子函数仍然能够在其上下文中访问并使用这边变量/常量。当子函数执行完毕，JS 引擎才会将子函数的上下文及闭包一并从执行栈中移除。")]),t._v(" "),a("p",[t._v("最后，JS 引擎是单线程的，那么它是如何处理高并发的呢？即当代码中存在异步调用时 JS 是如何执行的。比如 setTimeout 或 fetch 请求都是 non-blocking 的，当异步调用代码触发时，JS 引擎会将需要异步执行的代码移出调用栈，直到等待到返回结果，JS 引擎会立即将与之对应的回调函数 push 进任务队列中等待被调用，当调用(执行)栈中已经没有需要被执行的代码时，JS 引擎会立刻将任务队列中的回调函数逐个 push 进调用栈并执行。这个过程我们也称之为事件循环。")]),t._v(" "),a("p",[t._v("参考文章："),a("a",{attrs:{href:"https://juejin.cn/post/6844904097556987917",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://juejin.cn/post/6844904097556987917"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"json-stringify-的局限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-stringify-的局限"}},[t._v("#")]),t._v(" JSON.stringify() 的局限")]),t._v(" "),a("ul",[a("li",[t._v("忽略 "),a("code",[t._v("undefined")])]),t._v(" "),a("li",[t._v("忽略 "),a("code",[t._v("symbol")])]),t._v(" "),a("li",[t._v("不能序列化函数")]),t._v(" "),a("li",[t._v("不能解决循环引用对象")])]),t._v(" "),a("h4",{attrs:{id:"js-之-阻止事件冒泡-阻止默认事件-event-stoppropagation-和-event-preventdefault-return-false-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-之-阻止事件冒泡-阻止默认事件-event-stoppropagation-和-event-preventdefault-return-false-的区别"}},[t._v("#")]),t._v(" JS 之 阻止事件冒泡，阻止默认事件，event.stopPropagation()和 event.preventDefault()，return false 的区别")]),t._v(" "),a("ul",[a("li",[t._v("event.stopPropagation()\n　　阻止事件的冒泡，不让事件向 documen 上蔓延，但是默认事件任然会执行，当调用这个方法的时候，如果点击一个连接，这个连接仍然会被打开。")]),t._v(" "),a("li",[t._v("event.preventDefault()\n　　阻止默认事件的方法，调用此方法时，连接不会被打开，但是会发生冒泡，冒泡会传递到上一层的父元素；")]),t._v(" "),a("li",[t._v("return false；\n　　这个方法比较暴力，会同时阻止事件冒泡也会阻止默认事件；写上此代码，连接不会被打开，事件也不会传递到上一层的父元素；可以理解为 return\nfalse 就等于同时调用了 event.stopPropagation()和 event.preventDefault()。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);