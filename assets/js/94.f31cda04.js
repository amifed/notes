(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{512:function(v,_,a){"use strict";a.r(_);var t=a(18),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"html-常见面试问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html-常见面试问题"}},[v._v("#")]),v._v(" HTML 常见面试问题")]),v._v(" "),a("h2",{attrs:{id:"作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[v._v("#")]),v._v(" <!DOCTYPE html> 作用")]),v._v(" "),a("p",[v._v("DOCTYPE 标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。")]),v._v(" "),a("p",[v._v("HTML5：使用方式 <!DOCTYPE html>")]),v._v(" "),a("h2",{attrs:{id:"浏览器渲染原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染原理"}},[v._v("#")]),v._v(" 浏览器渲染原理")]),v._v(" "),a("p",[v._v("（1）首先解析收到的文档，根据文档定义构建一棵 DOM 树，DOM 树是由 DOM 元素及属性节点组成的。")]),v._v(" "),a("p",[v._v("（2）然后对 CSS 进行解析，生成 CSSOM 规则树。")]),v._v(" "),a("p",[v._v("（3）根据 DOM 树和 CSSOM 规则树构建渲染树。渲染树的节点被称为渲染对象，渲染对象是一个包含有颜色和大小等属性的矩形，渲染对象和 DOM 元素相对应，但这种对应关系不是一对一的，不可见的 DOM 元素不会被插入渲染树。还有一些 DOM 元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。")]),v._v(" "),a("p",[v._v("（4）当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。")]),v._v(" "),a("p",[v._v("（5）布局阶段结束后是绘制阶段，遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示在屏幕上，绘制使用 UI 基础组件。")]),v._v(" "),a("p",[v._v("这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的 html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。")]),v._v(" "),a("h2",{attrs:{id:"重绘、回流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重绘、回流"}},[v._v("#")]),v._v(" 重绘、回流")]),v._v(" "),a("p",[v._v("重绘: 当渲染树中的一些元素需要更新属性，而这些属性只是影响元素的外观、风格，而不会影响布局的操作，比如 "),a("code",[v._v("background-color")]),v._v("，我们将这样的操作称为重绘。")]),v._v(" "),a("p",[v._v("回流：当渲染树中的一部分（或全部）因为元素的规模尺寸、布局、隐藏等改变而需要重新构建的操作，会影响到布局的操作，这样的操作我们称为回流。")]),v._v(" "),a("p",[a("strong",[v._v("回流必将引起重绘，重绘不一定会引起回流")])]),v._v(" "),a("p",[v._v("DOM 操作或者属性访问可能会引起页面的回流和重绘，从而引起性能上的消耗。")]),v._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6844903569087266823",target:"_blank",rel:"noopener noreferrer"}},[v._v("浏览器的回流与重绘 (Reflow & Repaint)"),a("OutboundLink")],1)]),v._v(" "),a("h2",{attrs:{id:"html-语义化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html-语义化"}},[v._v("#")]),v._v(" HTML 语义化")]),v._v(" "),a("ol",[a("li",[v._v("用正确的标签做正确的事情。")]),v._v(" "),a("li",[v._v("html 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;")]),v._v(" "),a("li",[v._v("即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的;")]),v._v(" "),a("li",[v._v("搜索引擎的爬虫也依赖于 HTML 标记来确定上下文和各个关键字的权重，利于 SEO ;")]),v._v(" "),a("li",[v._v("使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。")])]),v._v(" "),a("h2",{attrs:{id:"浏览器内多个标签页之间的通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内多个标签页之间的通信"}},[v._v("#")]),v._v(" 浏览器内多个标签页之间的通信")]),v._v(" "),a("ol",[a("li",[v._v("WebSocket，通信标签页连接同一个服务器，发送消息到服务器，服务器推送消息到连接的客户端；")]),v._v(" "),a("li",[v._v("SharedWorker，（仅 Chrome 实现），两个页面共享同一个线程，通过向线程发送数据和接收数据实现双向通信；")]),v._v(" "),a("li",[v._v("可以调用 localStorage、cookies 等本地存储方式，localStorge 在另一个浏览上下文里被添加、修改或删除时，它都会触发一个 storage 事件，我们通过监听 storage 事件，控制它的值来进行页面信息通信；")]),v._v(" "),a("li",[v._v("如果我们能够获得对应标签页的引用，可通过 postMessage 方法实现多个标签页。")])]),v._v(" "),a("h2",{attrs:{id:"canvas-和-svg-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#canvas-和-svg-有什么区别"}},[v._v("#")]),v._v(" Canvas 和 SVG 有什么区别？")]),v._v(" "),a("p",[v._v("Canvas 是一种通过 JavaScript 来绘制 2D 图形的方法。Canvas 是逐像素来进行渲染的，因此当我们对 Canvas 进行缩放时，会出现锯齿或者失真的情况。")]),v._v(" "),a("p",[v._v("SVG 是一种使用 XML 描述 2D 图形的语言。SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。我们可以为某个元素附加 JavaScript 事件监听函数。并且 SVG 保存的是图形的绘制方法，因此当 SVG 图形缩放时并不会失真。")]),v._v(" "),a("h2",{attrs:{id:"前端性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端性能优化"}},[v._v("#")]),v._v(" 前端性能优化")]),v._v(" "),a("p",[v._v("前端性能优化主要是为了提高页面的加载速度，优化用户的访问体验。我认为可以从这些方面来进行优化。")]),v._v(" "),a("p",[v._v("第一个方面是页面的内容方面")]),v._v(" "),a("p",[v._v("（1）通过文件合并、css 雪碧图、使用 base64 等方式来减少 HTTP 请求数，避免过多的请求造成等待的情况。")]),v._v(" "),a("p",[v._v("（2）通过 DNS 缓存等机制来减少 DNS 的查询次数。")]),v._v(" "),a("p",[v._v("（3）通过设置缓存策略，对常用不变的资源进行缓存。")]),v._v(" "),a("p",[v._v("（4）使用延迟加载的方式，来减少页面首屏加载时需要请求的资源。延迟加载的资源当用户需要访问时，再去请求加载。")]),v._v(" "),a("p",[v._v("（5）通过用户行为，对某些资源使用预加载的方式，来提高用户需要访问资源时的响应速度。")]),v._v(" "),a("p",[v._v("第二个方面是服务器方面")]),v._v(" "),a("p",[v._v("（1）使用 CDN 服务，来提高用户对于资源请求时的响应速度。")]),v._v(" "),a("p",[v._v("（2）服务器端启用 Gzip、Deflate 等方式对于传输的资源进行压缩，减小文件的体积。")]),v._v(" "),a("p",[v._v("（3）尽可能减小 cookie 的大小，并且通过将静态资源分配到其他域名下，来避免对静态资源请求时携带不必要的 cookie")]),v._v(" "),a("p",[v._v("第三个方面是 CSS 和 JavaScript 方面")]),v._v(" "),a("p",[v._v("（1）把样式表放在页面的 head 标签中，减少页面的首次渲染的时间。")]),v._v(" "),a("p",[v._v("（2）避免使用 @import 标签。")]),v._v(" "),a("p",[v._v("（3）尽量把 js 脚本放在页面底部或者使用 defer 或 async 属性，避免脚本的加载和执行阻塞页面的渲染。")]),v._v(" "),a("p",[v._v("（4）通过对 JavaScript 和 CSS 的文件进行压缩，来减小文件的体积。")]),v._v(" "),a("p",[v._v("参考文章："),a("a",{attrs:{href:"https://juejin.cn/post/6844903657318645767#heading-10",target:"_blank",rel:"noopener noreferrer"}},[v._v("前端性能优化之雅虎 35 条军规"),a("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=r.exports}}]);